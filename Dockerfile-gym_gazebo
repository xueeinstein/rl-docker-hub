FROM tensorflow/tensorflow:1.4.1-gpu-py3
MAINTAINER Bill Xue <xueeinstein@gmail.com>

#--------------------
# General setup
#--------------------
RUN apt-get update \
    && apt-get install -y --no-install-recommends software-properties-common curl \
    && sh -c "echo 'deb http://download.opensuse.org/repositories/home:/Horst3180/xUbuntu_16.04/ /' >> /etc/apt/sources.list.d/arc-theme.list" \
    && curl -SL http://download.opensuse.org/repositories/home:Horst3180/xUbuntu_16.04/Release.key | apt-key add - \
    && add-apt-repository ppa:fcwu-tw/ppa \
    && apt-get update \
    && apt-get install -y --no-install-recommends --allow-unauthenticated \
        supervisor \
        openssh-server pwgen sudo vim-tiny \
        net-tools \
        lxde x11vnc xvfb \
        gtk2-engines-murrine ttf-ubuntu-font-family \
        firefox htop nginx \
        fonts-wqy-microhei \
        language-pack-zh-hant language-pack-gnome-zh-hant firefox-locale-zh-hant \
        python-pip python-dev build-essential \
        mesa-utils libgl1-mesa-dri \
        gnome-themes-standard gtk2-engines-pixbuf gtk2-engines-murrine pinta arc-theme \
        dbus-x11 x11-utils \
    && apt-get install -y python3 python3-pip python3-setuptools libpq-dev \
    libjpeg-dev libxaw7-dev wget curl cmake git

#--------------------
# tini for subreap
#--------------------
ENV TINI_VERSION v0.9.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /bin/tini
RUN chmod +x /bin/tini

#--------------------
# Install web VNC
#--------------------
ADD image /
RUN pip2 install setuptools wheel && pip2 install -r /usr/lib/web/requirements.txt
RUN rm /etc/apt/sources.list.d/arc-theme.list

#--------------------
# Install gym
#--------------------
RUN pip3 install gym
# Checks
# RUN python3 -c "import gym"

#--------------------
# Install Gazebo
#--------------------
RUN sh -c 'echo "deb http://packages.osrfoundation.org/gazebo/ubuntu-stable xenial main" > /etc/apt/sources.list.d/gazebo-stable.list'

RUN wget http://packages.osrfoundation.org/gazebo.key -O - | apt-key add -

RUN apt-get update && apt-get install -y gazebo8 libgazebo8-dev
# RUN apt-get install -y libglib2.0-dev libgts-dev libgts-dev

# setup environment
EXPOSE 11345

#--------------------
# Install ROS
#--------------------

# setup environment
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8
WORKDIR /root

# setup keys
RUN apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys 421C365BD9FF1F717815A3895523BAEEB01FA116

# setup sources.list
RUN echo "deb http://packages.ros.org/ros/ubuntu xenial main" > /etc/apt/sources.list.d/ros-latest.list

# install ros packages
ENV ROS_DISTRO kinetic
RUN apt-get install cmake gcc g++

# Install from sources
#----------------------------
# RUN apt-get install python3-rosdep python3-rosinstall-generator python3-wstool \
#           python3-rosinstall build-essential
# or alternatively,
RUN apt-get update && apt-get install -y libboost-all-dev

RUN pip3 install --upgrade pip
RUN pip3 install -U rosdep rosinstall_generator wstool rosinstall
RUN pip3 install rospkg catkin_pkg empy

# bootstrap rosdep
RUN rosdep init \
    && rosdep update

RUN mkdir ros_catkin_ws
# Create package set
RUN cd ros_catkin_ws && rosinstall_generator ros_comm --rosdistro kinetic \
            --deps --wet-only --tar > kinetic-ros_comm-wet.rosinstall
# Fetch packages
RUN cd ros_catkin_ws && wstool init -j1 src kinetic-ros_comm-wet.rosinstall
# # Solve dependencies
# RUN cd ros_catkin_ws && rosdep install --from-paths src --ignore-src --rosdistro kinetic -y

# Create symbolic link for the compilation
RUN cd /usr/bin && ln -sf python3 python

# Install console_bridge from packages
RUN apt-get install libconsole-bridge-dev -y
# # Compile/install console_bridge as a library
# RUN git clone git://github.com/ros/console_bridge.git
# RUN cd console_bridge && cmake . && make
# RUN cd console_bridge && make install

RUN apt-get install -y libtinyxml-dev liblz4-dev libbz2-dev liburdfdom-dev libpoco-dev \
              libtinyxml2-dev

# # Compile the basic ROS packages, optimize docker production
# RUN cd ros_catkin_ws && ./src/catkin/bin/catkin_make_isolated -DPYTHON_VERSION=3.5 --install -DCMAKE_BUILD_TYPE=Release

# Add a few packages and dependencies by hand
# RUN cd ros_catkin_ws/src && git clone https://github.com/ros/console_bridge
RUN cd ros_catkin_ws/src && git clone https://github.com/ros-controls/control_toolbox
RUN cd ros_catkin_ws/src && git clone https://github.com/ros-controls/realtime_tools
RUN cd ros_catkin_ws/src && git clone https://github.com/ros/actionlib
RUN cd ros_catkin_ws/src && git clone https://github.com/ros/pluginlib
RUN cd ros_catkin_ws/src && git clone https://github.com/ros/class_loader
RUN cd ros_catkin_ws/src && git clone https://github.com/ros/urdf
RUN cd ros_catkin_ws/src && git clone https://github.com/ros-simulation/gazebo_ros_pkgs
RUN cd ros_catkin_ws/src && git clone https://github.com/ros/common_msgs
RUN cd ros_catkin_ws/src && git clone https://github.com/ros-controls/control_msgs
RUN cd ros_catkin_ws/src && git clone https://github.com/vmayoral/dynamic_reconfigure
RUN cd ros_catkin_ws/src && git clone https://github.com/ros/geometry
RUN cd ros_catkin_ws/src && git clone https://github.com/erlerobot/orocos_kinematics_dynamics
RUN cd ros_catkin_ws/src && git clone https://github.com/ros/angles
RUN cd ros_catkin_ws/src && git clone https://github.com/ros/geometry2
RUN cd ros_catkin_ws/src && git clone https://github.com/ros/rosconsole_bridge
RUN cd ros_catkin_ws/src && git clone https://github.com/ros/nodelet_core
RUN cd ros_catkin_ws/src && git clone https://github.com/ros/bond_core
RUN cd ros_catkin_ws/src && git clone https://github.com/ros-perception/image_common
RUN cd ros_catkin_ws/src && git clone https://github.com/ros-perception/vision_opencv

# #--------------------
# # Follow up with the ROS intallation, splited in this funny way to optimize docker's performance
# #--------------------
RUN apt-get install -y libeigen3-dev python3-sip python3-sip-dev libyaml-cpp-dev \
                        libboost-python-dev unzip
# this installs an old version, not valid: libopencv-dev

# # Ignore some repositories due to some issues with libboost_python3
# #       https://github.com/ros/ros-overlay/issues/93
# RUN touch /root/ros_catkin_ws/src/image_common/camera_calibration_parsers/CATKIN_IGNORE
# RUN touch /root/ros_catkin_ws/src/image_common/camera_info_manager/CATKIN_IGNORE
RUN cd /usr/lib/x86_64-linux-gnu/ && ln -s libboost_python-py35.so libboost_python3.so

#--------------------
# Install OpenCV
#--------------------
# Compile OpenCV from sources
RUN apt install --assume-yes build-essential cmake git pkg-config unzip ffmpeg \
    qtbase5-dev python-dev python3-dev python-numpy python3-numpy libhdf5-dev \
    libgtk-3-dev libdc1394-22 libdc1394-22-dev libjpeg-dev libpng12-dev libtiff5-dev \
    libjasper-dev libavcodec-dev libavformat-dev libswscale-dev libxine2-dev \
    libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev libv4l-dev libtbb-dev \
    libfaac-dev libmp3lame-dev libopencore-amrnb-dev libopencore-amrwb-dev libtheora-dev \
    libvorbis-dev libxvidcore-dev v4l-utils
RUN git clone https://github.com/daveselinger/opencv.git opencv-3 && cd opencv-3 && \
    git checkout 3.1.0-with-cuda8
RUN mkdir opencv-build && cd opencv-build && \
    cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D WITH_CUDA=ON -D WITH_CUBLAS=ON -D WITH_TBB=ON -D WITH_V4L=ON -D WITH_QT=ON \
    -D WITH_OPENGL=ON -D BUILD_PERF_TESTS=OFF -D BUILD_TESTS=OFF \
    -DCUDA_NVCC_FLAGS="-D_FORCE_INLINES" ../opencv-3
RUN cd opencv-build && make -j4
RUN cd opencv-build && make install
RUN cd opencv-build && ldconfig

RUN cd ros_catkin_ws/src && git clone https://github.com/ros/diagnostics
RUN cd ros_catkin_ws/src && git clone https://github.com/ros-controls/ros_control

# Compile the again the workspace
RUN pip3 install catkin_pkg
RUN cd /usr/bin && ln -sf python3 python
RUN cd ros_catkin_ws && ./src/catkin/bin/catkin_make_isolated -DPYTHON_VERSION=3.5 \
        --install -DCMAKE_BUILD_TYPE=Release -DCATKIN_ENABLE_TESTING=OFF

# Debug
# RUN ls -l /opt/ros

#--------------------
# Install ROS 2
#--------------------
# Inspired on https://github.com/osrf/docker_images/blob/master/ros2/source/source/Dockerfile
RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu xenial main" > /etc/apt/sources.list.d/ros-latest.list'
RUN apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys 421C365BD9FF1F717815A3895523BAEEB01FA116

# setup environment
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8

RUN pip3 install configparser
# RUN apt-get install python-pkg-resources

# install packages
RUN apt-get update && apt-get install -q -y \
    # bash-completion \
    # build-essential \
    clang-format \
    # # cmake \
    # cppcheck \
    # git \
    libasio-dev \
    # libeigen3-dev \
    # libopencv-dev \
    # libpoco-dev \
    libpocofoundation9v5 \
    libpocofoundation9v5-dbg \
    libssl-dev \
    # libtinyxml-dev \
    # libtinyxml2-dev \
    openssl \
    # pydocstyle \
    # pyflakes \
    # python-empy \
    python3-coverage \
    python3-dev \
    python3-empy \
    python3-mock \
    python3-nose \
    python3-pep8 \
    python3-pip \
    python3-setuptools \
    python3-vcstool \
    python3-yaml \
    uncrustify \
    wget \
    && rm -rf /var/lib/apt/lists/*

# install python packages
RUN pip3 install -U \
    argcomplete \
    flake8 \
    flake8-import-order

# clone source
ENV ROS2_WS /root/ros2_ws
RUN mkdir -p $ROS2_WS/src
WORKDIR $ROS2_WS
RUN wget https://raw.githubusercontent.com/ros2/ros2/release-latest/ros2.repos \
&& vcs import src < ros2.repos

RUN pip3 install pyparsing pytest

# build source
WORKDIR $ROS2_WS
RUN src/ament/ament_tools/scripts/ament.py \
    build \
    --build-tests \
    --cmake-args -DSECURITY=OFF -- \
    --isolated \
    --parallel \
    --symlink-install


WORKDIR /root
#--------------------
# Install Sophus
#--------------------
RUN git clone https://github.com/stonier/sophus -b indigo && \
    cd sophus && mkdir build && cd build && cmake .. && make
# RUN ls -l
RUN cd sophus/build && make install
RUN echo "## Sophus installed ##\n"

#--------------------
# Install individual environments
#--------------------
WORKDIR /root

# Turtlebot
RUN cd ros_catkin_ws/src && git clone https://github.com/turtlebot/turtlebot && \
    git clone https://github.com/turtlebot/turtlebot_create && \
    git clone https://github.com/turtlebot/turtlebot_simulator && \
    git clone https://github.com/ros-drivers/joystick_drivers.git && \
    git clone https://github.com/yujinrobot/kobuki && \
    git clone https://github.com/yujinrobot/kobuki_core && \
    git clone https://github.com/yujinrobot/kobuki_msgs && \
    git clone https://github.com/ros-planning/navigation && \
    git clone https://github.com/ros-perception/perception_pcl.git && \
    git clone https://github.com/ros/xacro && \
    git clone https://github.com/yujinrobot/yocs_msgs && \
    git clone https://github.com/yujinrobot/yujin_ocs && \
    git clone https://github.com/stonier/ecl_core && \
    git clone https://github.com/stonier/ecl_lite && cd ecl_lite && git checkout 0.61.6 && cd .. && \
    git clone https://github.com/stonier/ecl_navigation && \
    git clone https://github.com/stonier/ecl_tools && cd ecl_tools && git checkout 0.61.7 &&  cd .. && \
    git clone https://github.com/ros-drivers/driver_common.git && \
    git clone https://github.com/ros-visualization/rqt_robot_dashboard
RUN apt-get update && apt-get install -y libftdi-dev libsdl-dev libsdl-image1.2-dev libspnav-dev
# installing pcl-dev causes some conflicts
RUN apt-get install -y libpcl-dev; exit 0
RUN cd ros_catkin_ws/src && git clone https://github.com/ros-perception/pcl_msgs && \
    git clone https://github.com/ros-perception/pcl_conversions && \
    git clone https://github.com/ros-gbp/bfl-release -b release/kinetic/bfl && \
    git clone https://github.com/yujinrobot/kobuki_desktop -b devel && cd kobuki_desktop && git checkout 0.5.1 && cd .. && \
    git clone https://github.com/ros-perception/laser_geometry && \
    git clone https://github.com/ros-planning/navigation_msgs && \
    git clone https://github.com/ros/roslint

# CATKIN_IGNORE wiimote
RUN cd ros_catkin_ws/src/joystick_drivers/wiimote && touch CATKIN_IGNORE
# # CATKIN_IGNORE yocs_ar_marker_tracking
# RUN cd ros_catkin_ws/src/yujin_ocs/yocs_ar_marker_tracking && touch CATKIN_IGNORE
RUN cd ros_catkin_ws/src && git clone https://github.com/ros-perception/ar_track_alvar
RUN cd ros_catkin_ws/src && git clone https://github.com/ros/resource_retriever
# CATKIN_IGNORE kobuki test suites
RUN cd ros_catkin_ws/src/kobuki/kobuki_testsuite && touch CATKIN_IGNORE
RUN cd ros_catkin_ws/src/kobuki_desktop/kobuki_qtestsuite && touch CATKIN_IGNORE
RUN cd ros_catkin_ws/src && git clone https://github.com/ros/robot_state_publisher
RUN cd ros_catkin_ws/src && git clone https://github.com/ros/kdl_parser

# Fix LaserScan
RUN cd ros_catkin_ws/src/common_msgs && git checkout 1.12.5

# Compile the again the workspace
# BACKUP
# RUN cd ros_catkin_ws && ./src/catkin/bin/catkin_make_isolated -DPYTHON_VERSION=3.5 \
#         --install -DCMAKE_BUILD_TYPE=Release -DCATKIN_ENABLE_TESTING=OFF

#--------------------
# Copy the code
#--------------------
# this invalidates the cache
RUN mkdir gym-gazebo
# COPY . /usr/local/gym/gym-gazebo
# COPY . /root/gym-gazebo
RUN git clone https://github.com/xueeinstein/gym-gazebo.git /root/gym-gazebo

#--------------------
# Others
#--------------------
RUN apt-get update && apt-get install -y python3-tk python3-defusedxml python3-skimage psmisc
RUN pip3 install netifaces

#--------------------
# Install gym-gazebo
#--------------------

RUN cd gym-gazebo && pip3 install -e .

# Jupyter Notebook
EXPOSE 8888
# TensorBoard
EXPOSE 6006
# Web VNC
EXPOSE 80

# Create symbolic link for the compilation
RUN cd /usr/bin && ln -sf python2 python
#--------------------
# Entry point
#--------------------
WORKDIR /root
ENV HOME=/home/ubuntu \
    SHELL=/bin/bash
ENTRYPOINT ["/root/gym-gazebo/entrypoint.sh", "/startup.sh"]
